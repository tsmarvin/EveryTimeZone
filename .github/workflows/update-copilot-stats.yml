name: Update Copilot Statistics

on:
  pull_request:
    types: [closed]
    branches: [ main ]

jobs:
  update-stats:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: write
      pages: write
      id-token: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Analyze Copilot Workflow Statistics
      id: copilot-stats
      uses: actions/github-script@v7
      with:
        script: |
          // Analyze Copilot SWE workflow activity with proper filtering and pagination
          // Focus on AI-generated development work, not CI/release/infrastructure workflows
          
          console.log('Fetching Copilot SWE workflow data from GitHub API...');
          
          try {
            let workflowRuns = [];
            let page = 1;
            let hasMore = true;
            let totalFetched = 0;
            
            // Strategy: Fetch all workflow runs with pagination, then filter for Copilot-related activity
            // This approach ensures we capture all relevant runs while being efficient about what we analyze
            
            while (hasMore && page <= 50) { // Safety limit: 50 pages (5000 runs max)
              console.log(`Fetching page ${page} of workflow runs...`);
              
              try {
                const runs = await github.rest.actions.listWorkflowRunsForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  per_page: 100,
                  page: page
                });
                
                totalFetched += runs.data.workflow_runs.length;
                
                // Filter for Copilot/AI-related workflow runs on this page
                const copilotRuns = runs.data.workflow_runs.filter(run => {
                  // Check workflow name for Copilot indicators
                  const workflowNameMatch = /copilot|agent|ai/i.test(run.name || '');
                  
                  // Check commit message for Copilot/AI indicators
                  const commitMessage = run.head_commit?.message || '';
                  const commitMatch = /copilot|agent|ai|fix:|feat:|refactor:|docs:|style:|perf:|test:/i.test(commitMessage);
                  
                  // Check if the run is from a branch that suggests Copilot work
                  const branchName = run.head_branch || '';
                  const branchMatch = /copilot|agent|ai|feature|fix|refactor/i.test(branchName);
                  
                  // Check if this is a pull request related run (most Copilot work goes through PRs)
                  const isPullRequest = run.pull_requests && run.pull_requests.length > 0;
                  
                  // For Copilot SWE work, we want:
                  // 1. Runs explicitly named as copilot/agent/ai workflows
                  // 2. Runs with conventional commit patterns (indicating structured development)
                  // 3. Runs from development branches (not main branch CI)
                  // 4. Pull request associated runs (Copilot typically works via PRs)
                  
                  return workflowNameMatch || 
                         (commitMatch && (branchMatch || isPullRequest || run.head_branch !== 'main'));
                });
                
                workflowRuns.push(...copilotRuns);
                console.log(`Page ${page}: Found ${copilotRuns.length} Copilot-related runs out of ${runs.data.workflow_runs.length} total runs`);
                
                // Check if we have more pages
                hasMore = runs.data.workflow_runs.length === 100;
                page++;
                
              } catch (error) {
                console.log(`Error fetching page ${page}: ${error.message}`);
                hasMore = false;
              }
            }
            
            console.log(`Total workflow runs fetched: ${totalFetched}`);
            console.log(`Copilot-related runs identified: ${workflowRuns.length}`);
            
            console.log(`Analyzing ${workflowRuns.length} workflow runs`);
            
            if (workflowRuns.length === 0) {
              console.log('No workflow runs found');
              core.setOutput('found', 'false');
              return;
            }
            
            // Initialize statistics
            let totalRuns = 0;
            let successCount = 0;
            let failureCount = 0;
            let totalRuntimeSeconds = 0;
            let minRuntimeSeconds = Number.MAX_SAFE_INTEGER;
            let maxRuntimeSeconds = 0;
            let prCount = 0;
            
            // Process each workflow run
            for (const run of workflowRuns) {
              totalRuns++;
              
              // Count successes and failures
              if (run.conclusion === 'success') {
                successCount++;
              } else if (['failure', 'cancelled', 'timed_out'].includes(run.conclusion)) {
                failureCount++;
              }
              
              // Calculate runtime
              if (run.created_at && run.updated_at) {
                try {
                  const createdAt = new Date(run.created_at);
                  const updatedAt = new Date(run.updated_at);
                  const runtimeSeconds = Math.floor((updatedAt - createdAt) / 1000);
                  
                  if (runtimeSeconds > 0 && runtimeSeconds < 86400) { // Sanity check: less than 24 hours
                    totalRuntimeSeconds += runtimeSeconds;
                    minRuntimeSeconds = Math.min(minRuntimeSeconds, runtimeSeconds);
                    maxRuntimeSeconds = Math.max(maxRuntimeSeconds, runtimeSeconds);
                  }
                } catch (error) {
                  console.log(`Error calculating runtime for run ${run.id}: ${error.message}`);
                }
              }
              
              // Count PR associations
              if (run.pull_requests && Array.isArray(run.pull_requests)) {
                prCount += run.pull_requests.length;
              }
            }
            
            // Calculate final statistics
            const successPercentage = totalRuns > 0 ? Math.round((successCount / totalRuns) * 100) : 0;
            const averageRuntime = totalRuns > 0 ? Math.round(totalRuntimeSeconds / totalRuns) : 0;
            const totalRuntimeHours = Math.round(totalRuntimeSeconds / 3600 * 10) / 10; // Round to 1 decimal
            
            // Handle edge cases
            if (minRuntimeSeconds === Number.MAX_SAFE_INTEGER) {
              minRuntimeSeconds = 0;
            }
            
            // Set outputs
            core.setOutput('found', 'true');
            core.setOutput('total_runs', totalRuns.toString());
            core.setOutput('success_count', successCount.toString());
            core.setOutput('failure_count', failureCount.toString());
            core.setOutput('success_percentage', successPercentage.toString());
            core.setOutput('total_runtime_seconds', totalRuntimeSeconds.toString());
            core.setOutput('total_runtime_hours', totalRuntimeHours.toString());
            core.setOutput('average_runtime', averageRuntime.toString());
            core.setOutput('min_runtime_seconds', minRuntimeSeconds.toString());
            core.setOutput('max_runtime_seconds', maxRuntimeSeconds.toString());
            core.setOutput('pr_count', prCount.toString());
            
            console.log('Copilot SWE Statistics calculated:');
            console.log(`- Total Copilot-related workflow runs: ${totalRuns}`);
            console.log(`- Success rate: ${successPercentage}%`);
            console.log(`- Total runtime: ${totalRuntimeHours}h`);
            console.log(`- Average runtime: ${averageRuntime}s`);
            console.log(`- Min/Max runtime: ${minRuntimeSeconds}s / ${maxRuntimeSeconds}s`);
            console.log(`- PR associations: ${prCount}`);
            
          } catch (error) {
            console.error('Error fetching workflow data:', error);
            console.error('Error stack:', error.stack);
            core.setOutput('found', 'false');
          }
    
    - name: Create Dynamic Copilot Statistics Badge
      if: steps.copilot-stats.outputs.found == 'true'
      run: |
        TOTAL_RUNS="${{ steps.copilot-stats.outputs.total_runs }}"
        SUCCESS_PCT="${{ steps.copilot-stats.outputs.success_percentage }}"
        RUNTIME_HOURS="${{ steps.copilot-stats.outputs.total_runtime_hours }}"
        
        # Create dynamic badge with real statistics
        cat > copilot-stats-badge.json << EOF
        {
          "schemaVersion": 1,
          "label": "copilot stats",
          "message": "${TOTAL_RUNS} runs | ${SUCCESS_PCT}% success | ${RUNTIME_HOURS}h total",
          "color": "blue"
        }
        EOF
        
        echo "Created dynamic Copilot statistics badge:"
        cat copilot-stats-badge.json
    
    - name: Create Fallback Badge
      if: steps.copilot-stats.outputs.found == 'false'
      run: |
        # Create fallback badge when no workflow data is available
        cat > copilot-stats-badge.json << EOF
        {
          "schemaVersion": 1,
          "label": "copilot stats",
          "message": "no data available",
          "color": "lightgrey"
        }
        EOF
        
        echo "Created fallback badge (no data available)"
        cat copilot-stats-badge.json
    
    - name: Deploy badge to gh-pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: .
        destination_dir: .
        keep_files: true
        publish_branch: gh-pages
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'
        commit_message: 'Update dynamic copilot statistics badge'
        include: |
          copilot-stats-badge.json
    
    - name: Upload statistics as artifact
      uses: actions/upload-artifact@v4
      with:
        name: copilot-statistics
        path: copilot-stats-badge.json
        retention-days: 90
    
    - name: Log final summary
      run: |
        echo "Copilot SWE Statistics Implementation:"
        if [ "${{ steps.copilot-stats.outputs.found }}" = "true" ]; then
          echo "✅ Successfully analyzed Copilot workflow data"
          echo "- Copilot-related workflow runs: ${{ steps.copilot-stats.outputs.total_runs }}"
          echo "- Success rate: ${{ steps.copilot-stats.outputs.success_percentage }}%"
          echo "- Total runtime: ${{ steps.copilot-stats.outputs.total_runtime_hours }} hours"
          echo "- Average runtime: ${{ steps.copilot-stats.outputs.average_runtime }} seconds"
        else
          echo "⚠️ No Copilot workflow data found - using fallback badge"
        fi
        echo "Badge deployed to gh-pages for dynamic display."