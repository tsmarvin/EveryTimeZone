name: Update Copilot Statistics

on:
  pull_request:
    types: [closed]
    branches: [ main ]

jobs:
  update-stats:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      pages: write
      id-token: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
    
    - name: Fetch Copilot Workflow Statistics
      id: copilot-stats
      uses: actions/github-script@v7
      with:
        script: |
          const repo = context.repo;
          
          // Get all workflows
          const workflows = await github.rest.actions.listRepoWorkflows({
            owner: repo.owner,
            repo: repo.repo
          });
          
          // Find the Copilot workflow (look for workflows that might be Copilot-related)
          const copilotWorkflow = workflows.data.workflows.find(w => 
            w.name.toLowerCase().includes('copilot') || 
            w.path.includes('copilot') ||
            w.name.toLowerCase().includes('agent')
          );
          
          if (!copilotWorkflow) {
            console.log('No Copilot workflow found. Available workflows:');
            workflows.data.workflows.forEach(w => console.log(`- ${w.name} (${w.path})`));
            core.setOutput('found', 'false');
            return;
          }
          
          console.log(`Found Copilot workflow: ${copilotWorkflow.name} (ID: ${copilotWorkflow.id})`);
          
          // Fetch all workflow runs with pagination
          let allRuns = [];
          let page = 1;
          const perPage = 100;
          
          while (true) {
            const runs = await github.rest.actions.listWorkflowRuns({
              owner: repo.owner,
              repo: repo.repo,
              workflow_id: copilotWorkflow.id,
              per_page: perPage,
              page: page
            });
            
            allRuns.push(...runs.data.workflow_runs);
            
            if (runs.data.workflow_runs.length < perPage) {
              break;
            }
            page++;
          }
          
          console.log(`Found ${allRuns.length} total workflow runs`);
          
          // Calculate statistics
          let successCount = 0;
          let failureCount = 0;
          let totalRuntimeSeconds = 0;
          let successRuntimes = [];
          let failureRuntimes = [];
          let prCounts = {};
          
          for (const run of allRuns) {
            if (!run.created_at || !run.updated_at) continue;
            
            const runtime = (new Date(run.updated_at) - new Date(run.created_at)) / 1000;
            totalRuntimeSeconds += runtime;
            
            if (run.conclusion === 'success') {
              successCount++;
              successRuntimes.push(runtime);
            } else if (run.conclusion && run.conclusion !== 'success') {
              failureCount++;
              failureRuntimes.push(runtime);
            }
            
            // Track per-PR statistics
            if (run.pull_requests && run.pull_requests.length > 0) {
              for (const pr of run.pull_requests) {
                if (!prCounts[pr.number]) {
                  prCounts[pr.number] = [];
                }
                prCounts[pr.number].push(runtime);
              }
            }
          }
          
          const totalRuns = successCount + failureCount;
          const successPercentage = totalRuns > 0 ? Math.round((successCount / totalRuns) * 100) : 0;
          const averageRuntimeSeconds = totalRuns > 0 ? Math.round(totalRuntimeSeconds / totalRuns) : 0;
          const totalRuntimeHours = Math.round(totalRuntimeSeconds / 3600 * 10) / 10;
          
          // Calculate min/max runtimes
          const allRuntimes = [...successRuntimes, ...failureRuntimes];
          const minRuntime = allRuntimes.length > 0 ? Math.min(...allRuntimes) : 0;
          const maxRuntime = allRuntimes.length > 0 ? Math.max(...allRuntimes) : 0;
          
          const stats = {
            totalRuns,
            successCount,
            failureCount,
            successPercentage,
            totalRuntimeHours,
            averageRuntimeSeconds: Math.round(averageRuntimeSeconds),
            minRuntimeSeconds: Math.round(minRuntime),
            maxRuntimeSeconds: Math.round(maxRuntime),
            prCount: Object.keys(prCounts).length
          };
          
          console.log('Copilot Statistics:', JSON.stringify(stats, null, 2));
          
          // Set outputs
          core.setOutput('found', 'true');
          core.setOutput('total_runs', stats.totalRuns);
          core.setOutput('success_count', stats.successCount);
          core.setOutput('success_percentage', stats.successPercentage);
          core.setOutput('total_runtime_hours', stats.totalRuntimeHours);
          core.setOutput('average_runtime_seconds', stats.averageRuntimeSeconds);
          core.setOutput('min_runtime_seconds', stats.minRuntimeSeconds);
          core.setOutput('max_runtime_seconds', stats.maxRuntimeSeconds);
          core.setOutput('pr_count', stats.prCount);
          
          // Store as workflow artifact for potential future use
          const fs = require('fs');
          fs.writeFileSync('copilot-stats.json', JSON.stringify({
            ...stats,
            updated: new Date().toISOString()
          }, null, 2));
    
    - name: Create badge JSON
      if: steps.copilot-stats.outputs.found == 'true'
      run: |
        # Create badge JSON for shields.io endpoint badge
        cat > copilot-stats-badge.json << EOF
        {
          "schemaVersion": 1,
          "label": "copilot stats",
          "message": "${{ steps.copilot-stats.outputs.total_runs }} runs | ${{ steps.copilot-stats.outputs.success_percentage }}% success | ${{ steps.copilot-stats.outputs.total_runtime_hours }}h total",
          "color": "blue"
        }
        EOF
        
        echo "Created badge JSON:"
        cat copilot-stats-badge.json
    
    - name: Deploy badge to gh-pages
      if: steps.copilot-stats.outputs.found == 'true'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: .
        destination_dir: .
        keep_files: true
        publish_branch: gh-pages
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'
        commit_message: 'Update copilot statistics badge'
        include: |
          copilot-stats-badge.json
          copilot-stats.json
    
    - name: Upload Copilot statistics
      if: steps.copilot-stats.outputs.found == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: copilot-statistics
        path: copilot-stats.json
        retention-days: 90
    
    - name: Log statistics summary
      if: steps.copilot-stats.outputs.found == 'true'
      run: |
        echo "Copilot Statistics Summary:"
        echo "- Total runs: ${{ steps.copilot-stats.outputs.total_runs }}"
        echo "- Success rate: ${{ steps.copilot-stats.outputs.success_percentage }}%"
        echo "- Total runtime: ${{ steps.copilot-stats.outputs.total_runtime_hours }} hours"
        echo "Badge updated on gh-pages branch for dynamic display."
    
    - name: Create fallback badge when no Copilot workflow found
      if: steps.copilot-stats.outputs.found == 'false'
      run: |
        # Create fallback badge JSON
        cat > copilot-stats-badge.json << EOF
        {
          "schemaVersion": 1,
          "label": "copilot stats",
          "message": "no data yet",
          "color": "lightgrey"
        }
        EOF
        
        echo "No Copilot workflow found. Created fallback badge."
    
    - name: Deploy fallback badge to gh-pages
      if: steps.copilot-stats.outputs.found == 'false'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: .
        destination_dir: .
        keep_files: true
        publish_branch: gh-pages
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'
        commit_message: 'Update copilot statistics badge (no data)'
        include: |
          copilot-stats-badge.json